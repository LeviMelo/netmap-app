Project structure for '/c/Users/Galaxy/LEVI/projects/apps/netmap-app/frontend/src':
===============================================================================
  App.css
  App.tsx
  assets/netmap_logo.png
  assets/react.svg
  components/common/ThemeToggleButton.tsx
  components/layout/ContextualTopbar.tsx
  components/layout/Sidebar.tsx
  components/layout/SidebarTab.tsx
  components/layout/UtilityPanel.tsx
  components/ui/Button.tsx
  components/ui/Card.tsx
  components/ui/index.ts
  components/ui/Input.tsx
  components/ui/Tooltip.tsx
  components/views/GraphCanvas.tsx
  components/views/WelcomeScreen.tsx
  hooks/useLongPress.ts
  hooks/useResponsive.ts
  hooks/useScrollOverflow.ts
  index.css
  main.tsx
  stores/appState.ts
  vite-env.d.ts



###############################################################################
### FILE: App.css
###############################################################################
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



###############################################################################
### FILE: App.tsx
###############################################################################
/**
 * Main Application Component
 * REFACTORED: This component is now the "Layout Orchestrator".
 * It uses the `useResponsive` hook to determine the overall layout structure
 * and handles the placement of the main UI regions. It no longer contains
 * business logic for views, which have been extracted.
 */
import React, { useEffect } from 'react';
import { useAppStore } from './stores/appState';
import { useResponsive } from './hooks/useResponsive';

import { Sidebar } from './components/layout/Sidebar';
import { ContextualTopbar } from './components/layout/ContextualTopbar';
import { UtilityPanel } from './components/layout/UtilityPanel';
import { WelcomeScreen } from './components/views/WelcomeScreen';
import { GraphCanvas } from './components/views/GraphCanvas';

const App: React.FC = () => {
  const { settings, sidebarCollapsed, elements } = useAppStore();
  const { isDesktop } = useResponsive();

  // FIXED: The responsibility of applying the theme class to the document
  // is now here, in a top-level component, not in the state store.
  useEffect(() => {
    document.documentElement.classList.toggle('dark', settings.theme === 'dark');
  }, [settings.theme]);

  const hasGraphData = elements.nodes.length > 0 || elements.edges.length > 0;

  // FIXED: The layout is now an "overlay" style.
  // The main content area uses padding to prevent content from being hidden
  // under the fixed-position UI elements (Sidebar on desktop, Mobile Topbar on mobile).
  // This eliminates the "pushing" and unwanted movement of the main viewport.
  const mainContentPadding = isDesktop
    ? (sidebarCollapsed ? 'pl-16' : 'pl-64')
    : 'pt-16'; // Padding top to account for the mobile top bar

  return (
    <div className="w-full h-screen bg-bg-primary text-text-base overflow-hidden">
      {/* The Sidebar component now handles rendering either the desktop
          sidebar or the mobile top bar based on the `isDesktop` hook. */}
      <Sidebar />
      
      {/* Main Content Area */}
      <div className={`h-full flex flex-col transition-all duration-300 ${mainContentPadding}`}>
        <ContextualTopbar />
        
        <div className="flex-1 flex overflow-hidden">
          {/* This is the primary viewport for your application's content. */}
          <main className="flex-1 relative" role="main" aria-label="Main Viewport">
            {hasGraphData ? <GraphCanvas /> : <WelcomeScreen />}
          </main>
          
          <UtilityPanel />
        </div>
      </div>
    </div>
  );
};

export default App;


###############################################################################
### FILE: assets/react.svg
###############################################################################
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>


###############################################################################
### FILE: components/common/ThemeToggleButton.tsx
###############################################################################
/**
 * A self-contained, reusable component for toggling the application's theme.
 * It hooks into the app state directly, making it a portable "drop-in" component.
 */
import React from 'react';
import { Sun, Moon } from 'lucide-react';
import { useAppStore } from '../../stores/appState';

export const ThemeToggleButton: React.FC = () => {
  const { settings, toggleTheme } = useAppStore();

  return (
    <button
      onClick={toggleTheme}
      className="p-2 rounded-lg hover:bg-accent-primary/10 transition-all duration-300 text-accent-primary"
      aria-label={`Switch to ${settings.theme === 'dark' ? 'light' : 'dark'} mode`}
    >
      {settings.theme === 'dark' ? <Sun size={18} /> : <Moon size={18} />}
    </button>
  );
};


###############################################################################
### FILE: components/layout/ContextualTopbar.tsx
###############################################################################
/**
 * Contextual Topbar Component
 * REFACTORED: This component is now simpler. It no longer manages the theme toggle.
 * Its sole responsibility is to display context-sensitive tabs.
 */
import React, { useEffect, useRef } from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { useAppStore } from '../../stores/appState';
import { InteractionMode } from '../../stores/appState';
import { useResponsive } from '../../hooks/useResponsive';
import { useScrollOverflow } from '../../hooks/useScrollOverflow';

interface ContextualTopbarProps {
  className?: string;
}

interface SecondaryTab {
  id: string;
  label: string;
  description: string;
}

// ... (secondaryTabsMap remains the same)
const secondaryTabsMap: Record<InteractionMode, SecondaryTab[]> = {
  view: [
    { id: 'overview', label: 'Overview', description: 'Graph overview and navigation' },
  ],
  dataIO: [
    { id: 'import', label: 'Import', description: 'Load graph data from JSON/CSV' },
    { id: 'export', label: 'Export', description: 'Export graph in various formats' },
    { id: 'validate', label: 'Validate', description: 'Validate and fix data issues' },
  ],
  manualEdit: [
    { id: 'nodes', label: 'Nodes', description: 'Add, edit, and delete nodes' },
    { id: 'edges', label: 'Edges', description: 'Add, edit, and delete edges' },
    { id: 'properties', label: 'Properties', description: 'Edit node and edge properties' },
  ],
  paint: [
    { id: 'colors', label: 'Colors', description: 'Apply colors to nodes and edges' },
    { id: 'styles', label: 'Styles', description: 'Apply visual styles and themes' },
    { id: 'presets', label: 'Presets', description: 'Save and load style presets' },
  ],
  layout: [
    { id: 'manual', label: 'Manual', description: 'Manual positioning and arrangement' },
    { id: 'physics', label: 'Physics', description: 'Force-directed layout simulation' },
    { id: 'hierarchy', label: 'Hierarchy', description: 'Hierarchical and radial layouts' },
    { id: 'flow', label: 'Flow', description: 'Directed flow and tree layouts' },
    { id: 'grid', label: 'Grid', description: 'Grid and matrix arrangements' },
    { id: 'snapshots', label: 'Snapshots', description: 'Save and restore layout snapshots' },
  ],
  analyze: [
    { id: 'summary', label: 'Summary', description: 'Basic graph statistics' },
    { id: 'components', label: 'Components', description: 'Connected components analysis' },
    { id: 'metrics', label: 'Metrics', description: 'Centrality and importance metrics' },
    { id: 'clusters', label: 'Clusters', description: 'Community detection and clustering' },
  ],
}


export const ContextualTopbar: React.FC<ContextualTopbarProps> = ({ className = '' }) => {
  const { mode, sidebarCollapsed, toggleSidebar } = useAppStore();
  const [activeSecondaryTab, setActiveSecondaryTab] = React.useState<string>('');
  const { isDesktop } = useResponsive();

  const secondaryTabs = secondaryTabsMap[mode] || [];
  const tabRefs = useRef<(HTMLButtonElement | null)[]>([]);

  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const isOverflowing = useScrollOverflow(scrollContainerRef);

  useEffect(() => {
    if (secondaryTabs.length > 0) {
      setActiveSecondaryTab(secondaryTabs[0].id);
    }
  }, [mode, secondaryTabs]);

  useEffect(() => {
    const activeIndex = secondaryTabs.findIndex(tab => tab.id === activeSecondaryTab);
    if (activeIndex !== -1) {
      const activeTabElement = tabRefs.current[activeIndex];
      if (activeTabElement) {
        activeTabElement.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
      }
    }
  }, [activeSecondaryTab, secondaryTabs]);

  if (secondaryTabs.length === 0) {
    // If no tabs, render a minimal bar on desktop to house the collapse button
    if (!isDesktop) return null; // Render nothing on mobile
    return (
      <div className="glass-level-2 border-b border-border px-4 h-16 flex items-center">
        <button
          onClick={toggleSidebar}
          className="p-2 rounded-lg hover:bg-accent-primary/10 transition-all text-accent-primary"
          aria-label={sidebarCollapsed ? "Expand sidebar" : "Collapse sidebar"}
        >
          {sidebarCollapsed ? <ChevronRight size={18} /> : <ChevronLeft size={18} />}
        </button>
      </div>
    );
  }

  return (
    <div className={`glass-level-2 border-b border-border h-16 flex items-center relative overflow-hidden ${className}`}>
      <div className="absolute inset-0 bg-gradient-to-r from-accent-secondary/3 to-accent-tertiary/3 opacity-50"></div>
      
      <div className="flex items-center w-full px-4 relative z-10 gap-4">
        {isDesktop && (
          <div className="flex-shrink-0">
            <button
              onClick={toggleSidebar}
              className="p-2 rounded-lg hover:bg-accent-primary/10 transition-all duration-300 text-accent-primary"
              aria-label={sidebarCollapsed ? "Expand sidebar" : "Collapse sidebar"}
            >
              {sidebarCollapsed ? <ChevronRight size={18} /> : <ChevronLeft size={18} />}
            </button>
          </div>
        )}

        <div className="flex-1 min-w-0 overflow-hidden">
          <div className="flex justify-center">
          <div ref={scrollContainerRef} className={`flex items-center gap-2 overflow-x-auto py-2 scrollbar-hide ${isOverflowing ? '[mask-image:linear-gradient(to_right,transparent,black_15%,black_85%,transparent)]' : ''}`} role="tablist" aria-label={`${mode} options`}>
              {secondaryTabs.map((tab, index) => (
                <button
                  key={tab.id}
                  ref={el => { tabRefs.current[index] = el }}
                  onClick={() => setActiveSecondaryTab(tab.id)}
                  className={[
                    'flex-shrink-0 px-3 py-1.5 rounded-lg text-xs font-medium',
                    'transition-all duration-300 border border-transparent whitespace-nowrap',
                    'min-h-[36px]',
                    activeSecondaryTab === tab.id
                      ? 'bg-accent-primary/15 text-accent-primary border-accent-primary/30 shadow-md'
                      : 'text-text-muted hover:text-accent-primary hover:bg-accent-primary/8'
                  ].join(' ')}
                  role="tab"
                  aria-selected={activeSecondaryTab === tab.id}
                  aria-describedby={`${tab.id}-description`}
                >
                  <span className="relative z-10">{tab.label}</span>
                  <span id={`${tab.id}-description`} className="sr-only">{tab.description}</span>
                </button>
              ))}
            </div>
          </div>
        </div>

        {isDesktop && (
          <div className="flex items-center gap-2 flex-shrink-0">
            <div className="flex items-center gap-2 px-3 py-1.5 rounded-lg bg-accent-secondary/10 border border-accent-secondary/20">
              <div className="w-2 h-2 rounded-full bg-accent-secondary"></div>
              <span className="text-text-muted text-xs">Mode:</span>
              <span className="font-bold text-accent-secondary capitalize tracking-wide text-xs">
                {mode.replace(/([A-Z])/g, ' $1').toLowerCase()}
              </span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};


###############################################################################
### FILE: components/layout/Sidebar.tsx
###############################################################################
/**
 * Primary Navigation Sidebar Component
 * FINAL REFACTOR: This component is now a pure layout container.
 * The complex logic for each tab has been extracted to the SidebarTab component,
 * solving the React Hook crash and simplifying maintenance.
 */
import React from 'react';
import { Home, Edit3, LayoutGrid, BarChart3, Palette } from 'lucide-react';
import { useAppStore, InteractionMode } from '../../stores/appState';
import { useResponsive } from '../../hooks/useResponsive';
import { ThemeToggleButton } from '../common/ThemeToggleButton';
import { SidebarTab } from './SidebarTab'; // Import the new component

interface TabItem {
  id: InteractionMode;
  label: string;
  icon: React.ComponentType<{ size?: number; className?: string }>;
  description: string;
}

const primaryTabs: TabItem[] = [
  { id: 'dataIO', label: 'Data I/O', icon: Home, description: 'Load and export graph data' },
  { id: 'manualEdit', label: 'Edit', icon: Edit3, description: 'Edit nodes and edges manually' },
  { id: 'layout', label: 'Layout', icon: LayoutGrid, description: 'Apply different layout algorithms' },
  { id: 'analyze', label: 'Analyze', icon: BarChart3, description: 'Analyze graph metrics and structure' },
  { id: 'paint', label: 'Paint', icon: Palette, description: 'Style nodes and edges with colors' },
];

export const Sidebar: React.FC = () => {
  const { mode, setMode, sidebarCollapsed } = useAppStore();
  const { isDesktop } = useResponsive();

  const MobileNav = (
    <nav className="md:hidden fixed top-0 left-0 right-0 z-40 glass-level-1 border-b border-border h-16 flex items-center px-4">
      <div className="flex-shrink-0 w-10 h-10 relative">
        <img src="/src/assets/netmap_logo.png" alt="NetMap Logo" className="w-full h-full object-contain" />
      </div>
      <div className="flex-1 mx-2 overflow-hidden">
        <div className="flex items-center justify-center gap-1 overflow-x-auto scrollbar-hide">
          {primaryTabs.map((tab) => {
            const isActive = mode === tab.id;
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setMode(tab.id)}
                className={[
                  'flex items-center gap-2 px-3 py-2 rounded-lg flex-shrink-0',
                  'transition-all duration-300 border whitespace-nowrap',
                  isActive ? 'bg-accent-secondary/20 text-accent-secondary border-accent-secondary/30' : 'text-text-muted border-transparent hover:text-accent-secondary hover:bg-accent-secondary/10'
                ].join(' ')}
                aria-label={tab.label}
              >
                <Icon size={18} />
                <span className="text-sm font-semibold">{tab.label}</span>
              </button>
            );
          })}
        </div>
      </div>
      <div className="flex-shrink-0"><ThemeToggleButton /></div>
    </nav>
  );

  const DesktopSidebar = (
    <nav className={`glass-level-1 fixed left-0 top-0 h-full z-50 flex flex-col transition-all duration-300 ease-in-out ${sidebarCollapsed ? 'w-16' : 'w-64'}`}>
      <div className="flex items-center p-4 border-b border-border relative overflow-hidden h-16">
        <div className="absolute inset-0 bg-gradient-to-r from-accent-primary/8 to-accent-tertiary/8"></div>
        <div className="flex items-center gap-3 relative z-10 flex-1">
          <div className="w-10 h-10 relative flex-shrink-0">
            <img src="/src/assets/netmap_logo.png" alt="NetMap Logo" className="w-full h-full object-contain transition-transform hover:scale-105" />
          </div>
          {!sidebarCollapsed && (
            <div className="min-w-0 flex-1">
              <h1 className="text-h3 font-bold bg-gradient-to-r from-accent-primary via-accent-secondary to-accent-tertiary bg-clip-text text-transparent truncate">NetMap</h1>
            </div>
          )}
        </div>
      </div>
      <div className="flex-1 p-3 overflow-y-auto custom-scrollbar">
        <div className="space-y-1">
          {primaryTabs.map((tab, index) => (
            <React.Fragment key={tab.id}>
              <SidebarTab tab={tab} />
              {index < primaryTabs.length - 1 && <div className="mx-3 my-2 h-px bg-border/50"></div>}
            </React.Fragment>
          ))}
        </div>
      </div>
      <div className="mt-auto p-2 border-t border-border flex items-center justify-center">
        <ThemeToggleButton />
      </div>
    </nav>
  );

  return isDesktop ? DesktopSidebar : MobileNav;
};


###############################################################################
### FILE: components/layout/SidebarTab.tsx
###############################################################################
import React from 'react';
import { useAppStore, InteractionMode } from '../../stores/appState';
import { Tooltip } from '../ui/Tooltip';

interface TabItem {
  id: InteractionMode;
  label: string;
  icon: React.ComponentType<{ size?: number; className?: string }>;
  description: string;
}

interface SidebarTabProps {
  tab: TabItem;
}

export const SidebarTab: React.FC<SidebarTabProps> = ({ tab }) => {
  const { mode, setMode, sidebarCollapsed } = useAppStore();

  const isActive = mode === tab.id;
  const Icon = tab.icon;

  const buttonClasses = [
    'w-full flex items-center rounded-xl', 'transition-all duration-300',
    'text-left min-h-[44px] relative group',
    sidebarCollapsed ? 'px-3 py-3 justify-center' : 'px-4 py-3 gap-3',
    isActive 
      ? 'bg-gradient-to-r from-accent-secondary/20 to-accent-secondary/20 text-accent-secondary border border-accent-secondary/30 shadow-md' 
      : 'text-text-muted border border-transparent hover:text-accent-secondary hover:bg-gradient-to-r hover:from-accent-secondary/10 hover:to-accent-tertiary/10'
  ].join(' ');

  // The logic is now much simpler. The Tooltip handles its own hover state.
  return (
    <Tooltip content={tab.description}>
      <button onClick={() => setMode(tab.id)} className={buttonClasses} aria-label={tab.label}>
        <Icon size={20} className={`transition-all duration-300 flex-shrink-0 relative z-10 ${isActive ? 'text-accent-secondary' : 'text-text-muted group-hover:text-accent-secondary'}`} />
        {!sidebarCollapsed && (
          <div className="flex-1 relative z-10 min-w-0">
            <div className={`text-sm font-semibold truncate transition-all duration-300 ${isActive ? 'text-accent-secondary' : 'group-hover:text-accent-secondary'}`}>{tab.label}</div>
          </div>
        )}
      </button>
    </Tooltip>
  );
};


###############################################################################
### FILE: components/layout/UtilityPanel.tsx
###############################################################################
/**
 * Utility Panel Component
 * 
 * Context-sensitive utility panel implementing glassmorphism Level 3 (highly transparent).
 * Provides controls and information relevant to the current interaction mode.
 * Responsive: Right-docked resizable panel on desktop, bottom drawer on mobile.
 */

import React from 'react'
import { X, ChevronRight, ChevronDown } from 'lucide-react'
import { useAppStore } from '../../stores/appState'
import { Card } from '../ui/Card'

interface UtilityPanelProps {
  className?: string
}

export const UtilityPanel: React.FC<UtilityPanelProps> = ({ className = '' }) => {
  const { 
    mode, 
    utilityPanelVisible, 
    setUtilityPanelVisible,
    utilityPanelWidth,
    utilityPanelHeight,
    elements
  } = useAppStore()

  // Only show utility panel if graph has data and mode requires it
  const shouldShowUtilityPanel = (elements.nodes.length > 0 || elements.edges.length > 0) && 
    ['manualEdit', 'paint', 'layout', 'dataIO', 'analyze'].includes(mode)

  if (!utilityPanelVisible || !shouldShowUtilityPanel) {
    // Don't show the floating button if there's no graph data
    if (elements.nodes.length === 0 && elements.edges.length === 0) {
      return null
    }
    return (
      <button
        onClick={() => setUtilityPanelVisible(true)}
        className="fixed bottom-4 right-4 md:top-4 md:right-4 p-3 glass-level-3 rounded-lg shadow-lg z-30 transition-all hover:shadow-glow-primary"
        aria-label="Open utility panel"
      >
        <ChevronRight size={20} className="text-text-base md:hidden" />
        <ChevronDown size={20} className="text-text-base hidden md:block" />
      </button>
    )
  }

  const renderModeContent = () => {
    switch (mode) {
      case 'dataIO':
        return (
          <div className="space-y-4">
            <h3 className="text-h3 text-text-base">Data Import/Export</h3>
            <Card variant="base" className="p-4">
              <div className="space-y-3">
                <div className="flex gap-2">
                  <button className="btn-base btn-secondary flex-1 text-xs">
                    Import JSON
                  </button>
                  <button className="btn-base btn-secondary flex-1 text-xs">
                    Export PNG
                  </button>
                </div>
                <div className="text-small text-text-muted">
                  Load graph data or export your work in various formats.
                </div>
              </div>
            </Card>
          </div>
        )

      case 'manualEdit':
        return (
          <div className="space-y-4">
            <h3 className="text-h3 text-text-base">Manual Editing</h3>
            <Card variant="base" className="p-4">
              <div className="space-y-3">
                <div className="text-small text-text-muted">
                  Double-tap nodes to rename, drag to reposition, 
                  use node handles to create edges.
                </div>
                <div className="flex gap-2">
                  <button className="btn-base btn-primary flex-1 text-xs">
                    Add Node
                  </button>
                  <button className="btn-base btn-secondary flex-1 text-xs">
                    Delete Selected
                  </button>
                </div>
              </div>
            </Card>
          </div>
        )

      case 'paint':
        return (
          <div className="space-y-4">
            <h3 className="text-h3 text-text-base">Paint & Style</h3>
            <Card variant="base" className="p-4">
              <div className="space-y-3">
                <div className="text-small text-text-muted mb-3">
                  Select colors and apply to nodes and edges.
                </div>
                <div className="grid grid-cols-4 gap-3">
                  {['#f97316', '#0ea5e9', '#ec4899', '#22c55e', '#ef4444', '#8b5cf6', '#f59e0b', '#6b7280'].map((color) => (
                    <button
                      key={color}
                      className="w-10 h-10 rounded-xl border-2 border-white/20 hover:scale-125 hover:shadow-lg transition-all duration-300 relative group overflow-hidden"
                      style={{ 
                        backgroundColor: color,
                        boxShadow: `0 4px 12px ${color}40`
                      }}
                      aria-label={`Select color ${color}`}
                    >
                      <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity"></div>
                      <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                    </button>
                  ))}
                </div>
                <div className="flex items-center gap-2 pt-2">
                  <input 
                    type="checkbox" 
                    id="propagate-edges" 
                    className="rounded"
                    defaultChecked
                  />
                  <label htmlFor="propagate-edges" className="text-small text-text-base">
                    Propagate to edges
                  </label>
                </div>
              </div>
            </Card>
          </div>
        )

      case 'layout':
        return (
          <div className="space-y-4">
            <h3 className="text-h3 text-text-base">Layout Controls</h3>
            <Card variant="base" className="p-4">
              <div className="space-y-3">
                <div className="text-small text-text-muted">
                  Adjust layout parameters and apply different arrangements.
                </div>
                <div className="space-y-3">
                  <div>
                    <label className="block text-small font-medium text-text-base mb-1">
                      Edge Length
                    </label>
                    <input 
                      type="range" 
                      min="50" 
                      max="300" 
                      defaultValue="150"
                      className="w-full"
                    />
                  </div>
                  <div>
                    <label className="block text-small font-medium text-text-base mb-1">
                      Node Spacing
                    </label>
                    <input 
                      type="range" 
                      min="10" 
                      max="100" 
                      defaultValue="50"
                      className="w-full"
                    />
                  </div>
                  <button className="btn-base btn-primary w-full">
                    Apply Layout
                  </button>
                </div>
              </div>
            </Card>
          </div>
        )

      case 'analyze':
        return (
          <div className="space-y-4">
            <h3 className="text-h3 text-text-base">Graph Analysis</h3>
            <Card variant="base" className="p-4">
              <div className="space-y-3">
                <div className="grid grid-cols-2 gap-3 text-center">
                  <div className="p-2 bg-bg-tertiary rounded-lg">
                    <div className="text-h3 text-accent-secondary">0</div>
                    <div className="text-small text-text-muted">Nodes</div>
                  </div>
                  <div className="p-2 bg-bg-tertiary rounded-lg">
                    <div className="text-h3 text-accent-secondary">0</div>
                    <div className="text-small text-text-muted">Edges</div>
                  </div>
                </div>
                <button className="btn-base btn-secondary w-full text-xs">
                  Calculate Metrics
                </button>
              </div>
            </Card>
          </div>
        )

      default:
        return (
          <div className="space-y-4">
            <h3 className="text-h3 text-text-base">Welcome</h3>
            <Card variant="base" className="p-4">
              <div className="text-small text-text-muted">
                Select a tool from the sidebar to see relevant controls here.
              </div>
            </Card>
          </div>
        )
    }
  }

  const panelClasses = [
    'glass-level-3',
    'border-l border-border',
    'p-4',
    'custom-scrollbar overflow-y-auto',
    'animate-slide-in-right',
    // Desktop: right-docked resizable panel
    'fixed right-0 top-0 h-full z-30',
    'hidden md:block',
    className
  ].filter(Boolean).join(' ')

  const mobilePanelClasses = [
    'glass-level-3',
    'border-t border-border',
    'p-4',
    'custom-scrollbar overflow-y-auto',
    'animate-slide-in-bottom',
    // Mobile: bottom drawer
    'fixed bottom-0 left-0 right-0 z-30',
    'md:hidden',
    className
  ].filter(Boolean).join(' ')

  return (
    <>
      {/* Desktop Panel */}
      <aside 
        className={panelClasses}
        style={{ width: utilityPanelWidth }}
        role="complementary"
        aria-label="Utility panel"
      >
        <div className="flex items-center justify-between mb-6 pb-3 border-b border-border/50 relative">
          <div className="absolute inset-0 bg-gradient-to-r from-accent-secondary/5 to-accent-tertiary/5 rounded-lg"></div>
          <div className="relative z-10">
            <h2 className="text-body-large font-bold bg-gradient-to-r from-accent-primary to-accent-secondary bg-clip-text text-transparent">
              Controls
            </h2>
            <p className="text-small text-text-muted capitalize">
              {mode.replace(/([A-Z])/g, ' $1').toLowerCase()} mode
            </p>
          </div>
          <button
            onClick={() => setUtilityPanelVisible(false)}
            className="relative z-10 p-2 hover:bg-bg-tertiary rounded-lg transition-all hover:scale-105 group"
            aria-label="Close utility panel"
          >
            <X size={16} className="text-text-muted group-hover:text-accent-secondary transition-colors" />
          </button>
        </div>
        
        {renderModeContent()}
      </aside>

      {/* Mobile Panel */}
      <aside 
        className={mobilePanelClasses}
        style={{ height: utilityPanelHeight }}
        role="complementary"
        aria-label="Utility panel"
      >
        <div className="flex items-center justify-between mb-6 pb-3 border-b border-border/50 relative">
          <div className="absolute inset-0 bg-gradient-to-r from-accent-secondary/5 to-accent-tertiary/5 rounded-lg"></div>
          <div className="relative z-10">
            <h2 className="text-body-large font-bold bg-gradient-to-r from-accent-primary to-accent-secondary bg-clip-text text-transparent">
              Controls
            </h2>
            <p className="text-small text-text-muted capitalize">
              {mode.replace(/([A-Z])/g, ' $1').toLowerCase()} mode
            </p>
          </div>
          <button
            onClick={() => setUtilityPanelVisible(false)}
            className="relative z-10 p-2 hover:bg-bg-tertiary rounded-lg transition-all hover:scale-105 group"
            aria-label="Close utility panel"
          >
            <X size={16} className="text-text-muted group-hover:text-accent-secondary transition-colors" />
          </button>
        </div>
        
        {renderModeContent()}
      </aside>

      {/* Backdrop for mobile */}
      <div 
        className="fixed inset-0 bg-black/20 z-20 md:hidden"
        onClick={() => setUtilityPanelVisible(false)}
      />
    </>
  )
} 


###############################################################################
### FILE: components/ui/Button.tsx
###############################################################################
/**
 * Button Component
 * 
 * A reusable button component that implements the design system with
 * primary, secondary, and ghost variants. Supports icons, loading states,
 * and accessibility features with proper touch targets.
 */

import React from 'react'
import { LucideIcon } from 'lucide-react'

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'ghost'
  size?: 'sm' | 'md' | 'lg'
  icon?: LucideIcon
  iconPosition?: 'left' | 'right'
  loading?: boolean
  children: React.ReactNode
}

export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  icon: Icon,
  iconPosition = 'left',
  loading = false,
  children,
  className = '',
  disabled,
  ...props
}) => {
  const baseClasses = 'btn-base transition-standard'
  
  const variantClasses = {
    primary: 'btn-primary',
    secondary: 'btn-secondary',
    ghost: 'btn-ghost',
  }
  
  const sizeClasses = {
    sm: 'px-3 py-1.5 text-xs min-h-[36px]',
    md: 'px-4 py-2 text-sm min-h-[44px]',
    lg: 'px-6 py-3 text-base min-h-[48px]',
  }
  
  const isDisabled = disabled || loading
  const disabledClasses = isDisabled ? 'opacity-50 cursor-not-allowed pointer-events-none' : ''
  
  const combinedClassName = [
    baseClasses,
    variantClasses[variant],
    sizeClasses[size],
    disabledClasses,
    className,
  ].filter(Boolean).join(' ')
  
  const renderIcon = () => {
    if (loading) {
      return (
        <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent" />
      )
    }
    
    if (Icon) {
      return <Icon size={16} />
    }
    
    return null
  }
  
  return (
    <button
      className={combinedClassName}
      disabled={isDisabled}
      {...props}
    >
      {iconPosition === 'left' && renderIcon()}
      {children}
      {iconPosition === 'right' && renderIcon()}
    </button>
  )
} 


###############################################################################
### FILE: components/ui/Card.tsx
###############################################################################
/**
 * Card Component
 * 
 * A reusable card component implementing the glassmorphism design system.
 * Provides base and elevated variants with proper shadows and backdrop blur.
 */

import React from 'react'

export interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: 'base' | 'elevated'
  children: React.ReactNode
}

export const Card: React.FC<CardProps> = ({
  variant = 'base',
  children,
  className = '',
  ...props
}) => {
  const variantClasses = {
    base: 'card-base',
    elevated: 'card-elevated',
  }
  
  const combinedClassName = [
    variantClasses[variant],
    className,
  ].filter(Boolean).join(' ')
  
  return (
    <div className={combinedClassName} {...props}>
      {children}
    </div>
  )
} 


###############################################################################
### FILE: components/ui/Input.tsx
###############################################################################
/**
 * Input Component
 * 
 * A reusable input component that follows the design system with
 * proper focus states, placeholder styling, and accessibility features.
 */

import React from 'react'

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string
  error?: string
  hint?: string
}

export const Input: React.FC<InputProps> = ({
  label,
  error,
  hint,
  className = '',
  id,
  ...props
}) => {
  const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`
  
  const inputClasses = [
    'input-base',
    error ? 'border-danger focus:outline-danger' : '',
    className,
  ].filter(Boolean).join(' ')
  
  return (
    <div className="w-full">
      {label && (
        <label 
          htmlFor={inputId}
          className="block text-small font-medium text-text-base mb-1"
        >
          {label}
        </label>
      )}
      
      <input
        id={inputId}
        className={inputClasses}
        {...props}
      />
      
      {error && (
        <p className="mt-1 text-small text-danger">
          {error}
        </p>
      )}
      
      {hint && !error && (
        <p className="mt-1 text-small text-text-muted">
          {hint}
        </p>
      )}
    </div>
  )
} 


###############################################################################
### FILE: components/ui/Tooltip.tsx
###############################################################################
import React, { useState, cloneElement } from 'react';
import {
  useFloating,
  autoUpdate,
  offset,
  flip,
  shift,
  useHover,
  useFocus,
  useDismiss,
  useRole,
  useInteractions,
  FloatingPortal,
  arrow,
} from '@floating-ui/react';
import { useRef } from 'react';

interface TooltipProps {
  content: React.ReactNode;
  children: React.JSX.Element; // Important: We need a single JSX element as a child
}

export const Tooltip: React.FC<TooltipProps> = ({ children, content }) => {
  const [isOpen, setIsOpen] = useState(false);
  const arrowRef = useRef(null);

  // Floating UI's core hook for positioning
  const { refs, floatingStyles, context } = useFloating({
    open: isOpen,
    onOpenChange: setIsOpen,
    placement: 'top',
    // Make sure the tooltip stays on the screen
    whileElementsMounted: autoUpdate,
    middleware: [
      offset(10), // Move it 10px away from the button
      flip({ fallbackAxisSideDirection: 'start' }), // Flip to the bottom if there's no space on top
      shift(), // Ensure it doesn't get cut off at the edges
      arrow({ element: arrowRef }), // Connect the arrow
    ],
  });

  // Hooks to control visibility based on user interaction
  const hover = useHover(context, { move: false, delay: { open: 500, close: 100 } });
  const focus = useFocus(context);
  const dismiss = useDismiss(context);
  const role = useRole(context, { role: 'tooltip' });

  // Merge all the interaction hooks into props
  const { getReferenceProps, getFloatingProps } = useInteractions([
    hover,
    focus,
    dismiss,
    role,
  ]);

  return (
    <>
      {/* We clone the child to attach the necessary ref and event handlers */}
      {cloneElement(children, getReferenceProps({ ref: refs.setReference, ...children.props }))}
      
      {/* The Portal teleports the tooltip's JSX to the `tooltip-root` div in index.html */}
      <FloatingPortal id="tooltip-root">
        {isOpen && (
          <div
            className="pointer-events-none z-[999]" // High z-index to be on top of everything
            ref={refs.setFloating}
            style={floatingStyles}
            {...getFloatingProps()}
          >
            {/* NEW STYLING: Opaque, glassmorphic, with a more prominent pointer */}
            <div 
              className="
                px-3 py-2 rounded-lg shadow-xl
                text-sm font-medium text-slate-200
                bg-slate-800/90 dark:bg-slate-900/90
                backdrop-blur-md border border-white/10
              "
            >
              {content}
              {/* The Arrow/Tail, positioned by Floating UI */}
              <div
                ref={arrowRef}
                className="absolute h-2 w-2 rotate-45 bg-slate-800 dark:bg-slate-900"
                style={{
                  bottom: -4,
                  left: context.middlewareData.arrow?.x,
                  right: '',
                }}
              />
            </div>
          </div>
        )}
      </FloatingPortal>
    </>
  );
};


###############################################################################
### FILE: components/ui/index.ts
###############################################################################
/**
 * UI Components Index
 * 
 * Centralized exports for all reusable UI components.
 * This allows for clean imports like: import { Button, Card, Input } from '@/components/ui'
 */

export { Button } from './Button'
export { Card } from './Card'
export { Input } from './Input'

export type { ButtonProps } from './Button'
export type { CardProps } from './Card'
export type { InputProps } from './Input' 


###############################################################################
### FILE: components/views/GraphCanvas.tsx
###############################################################################
/**
 * The view that holds the graph rendering area (e.g., Cytoscape canvas).
 * Displayed when graph data exists.
 */
import React from 'react';
import { useAppStore } from '../../stores/appState';

export const GraphCanvas: React.FC = () => {
  const { elements } = useAppStore();

  return (
    <div className="flex-1 relative overflow-hidden bg-bg-primary">
      {/* Graph will be rendered here by a library like Cytoscape.js */}
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 mx-auto mb-4 relative">
            <img 
              src="/src/assets/netmap_logo.png" 
              alt="NetMap Logo" 
              className="w-full h-full object-contain opacity-50"
            />
          </div>
          <p className="text-body text-text-muted">Graph rendering will be implemented here</p>
          <p className="text-small text-text-muted mt-2">
            {elements.nodes.length} nodes, {elements.edges.length} edges
          </p>
        </div>
      </div>
    </div>
  );
};


###############################################################################
### FILE: components/views/WelcomeScreen.tsx
###############################################################################
import React from 'react';

export const WelcomeScreen: React.FC = () => {
  return (
    <div className="w-full h-full flex flex-col items-center justify-center p-8 relative overflow-hidden">
      {/* Dynamic Animated Background */}
      <div className="absolute inset-0 bg-bg-primary overflow-hidden">
        {/* FIXED: Increased opacity and used theme colors for more vibrancy */}
        <div 
          className="absolute -inset-1/3 bg-[radial-gradient(circle_at_30%_40%,rgba(249,115,22,0.25),transparent_50%)] animate-[pulse-glow_10s_ease-in-out_infinite]"
        />
        <div 
          className="absolute -inset-1/3 bg-[radial-gradient(circle_at_70%_60%,rgba(14,165,233,0.2),transparent_50%)] animate-[gentle-drift-one_28s_ease-in-out_-5s_infinite]"
        />
         <div 
          className="absolute -inset-1/3 bg-[radial-gradient(circle_at_50%_50%,rgba(234,179,8,0.15),transparent_60%)] animate-[gentle-drift-two_35s_ease-in-out_infinite]"
        />
        <div className="absolute inset-0 opacity-20 dark:opacity-40">
          <div className="h-full w-full bg-[linear-gradient(rgba(15,23,42,0.1)_1px,transparent_1px),linear-gradient(90deg,rgba(15,23,42,0.1)_1px,transparent_1px)] bg-[size:20px_20px]"></div>
        </div>
      </div>
      
      <div className="relative z-10 text-center max-w-2xl">
        <div className="mb-8">
          <div className="w-24 h-24 mx-auto relative group">
            {/* FIXED: Increased blur, spread, and opacity of the drop-shadow for a more vibrant, multi-color glow */}
            <img 
              src="/src/assets/netmap_logo.png" 
              alt="NetMap Logo" 
              className="w-full h-full object-contain transition-transform group-hover:scale-110 duration-500 
                [filter:drop-shadow(0_0_18px_rgba(249,115,22,0.6))_drop-shadow(0_0_18px_rgba(14,165,233,0.5))]"
            />
          </div>
        </div>
        <h1 className="text-display font-bold mb-4 bg-gradient-to-r from-accent-primary via-accent-secondary to-accent-tertiary bg-clip-text text-transparent">
          Welcome to NetMap
        </h1>
        <p className="text-body-large text-text-muted mb-8 leading-relaxed">
          Create, visualize, and analyze concept maps with intuitive drag & drop editing, 
          smart layouts, and powerful export options.
        </p>
        <div className="mb-8">
          <button 
            onClick={() => {/* TODO */}}
            className="btn-base btn-primary text-lg px-8 py-4"
          >
            <span className="relative z-10">Create New Concept Map</span>
          </button>
        </div>
        <div className="text-small text-text-muted">
          or{' '}
          <button 
            onClick={() => {/* TODO */}}
            className="text-accent-secondary hover:text-accent-secondary-hover underline"
          >
            load from file
          </button>
        </div>
      </div>
    </div>
  );
};


###############################################################################
### FILE: hooks/useLongPress.ts
###############################################################################
import { useCallback, useRef } from 'react';

// Defines the options for the long press hook
interface LongPressOptions {
  shouldPreventDefault?: boolean;
  delay?: number;
}

/**
 * A hook to detect long press events on mouse and touch devices.
 * @param onLongPress - Callback for the long press event.
 * @param onClick - Callback for a regular click event.
 * @param options - Configuration for delay and default event prevention.
 */
export const useLongPress = (
  onLongPress: (event: React.MouseEvent | React.TouchEvent) => void,
  onClick: (event: React.MouseEvent | React.TouchEvent) => void,
  { shouldPreventDefault = true, delay = 400 }: LongPressOptions = {}
) => {
  // FIXED: The ref type must include `| null` and be initialized with `null`.
  const timeout = useRef<ReturnType<typeof setTimeout> | null>(null);
  // FIXED: Initialize the target ref with `null`.
  const target = useRef<EventTarget | null>(null);

  const start = useCallback(
    (event: React.MouseEvent | React.TouchEvent) => {
      if (shouldPreventDefault && event.target) {
        target.current = event.target;
        const preventDefault = (e: Event) => e.preventDefault();
        event.target.addEventListener('contextmenu', preventDefault, { once: true });
      }
      timeout.current = setTimeout(() => {
        onLongPress(event);
        // FIXED: Set the ref back to `null` after firing to match the type.
        timeout.current = null;
      }, delay);
    },
    [onLongPress, delay, shouldPreventDefault]
  );

  const clear = useCallback(
    (event: React.MouseEvent | React.TouchEvent, shouldTriggerClick = true) => {
      // This logic is now robust. If the timeout completed, timeout.current is null,
      // and isShortClick will correctly be false.
      const isShortClick = timeout.current !== null;
      
      // Always clear the timer if it exists.
      if (timeout.current) {
        clearTimeout(timeout.current);
      }

      if (shouldTriggerClick && isShortClick && event.target === target.current) {
        onClick(event);
      }
      
      if (shouldPreventDefault && target.current) {
        const preventDefault = (e: Event) => e.preventDefault();
        target.current.removeEventListener('contextmenu', preventDefault);
      }
    },
    [shouldPreventDefault, onClick]
  );

  return {
    onMouseDown: (e: React.MouseEvent) => start(e),
    onTouchStart: (e: React.TouchEvent) => start(e),
    onMouseUp: (e: React.MouseEvent) => clear(e),
    onMouseLeave: (e: React.MouseEvent) => clear(e, false),
    onTouchEnd: (e: React.TouchEvent) => clear(e),
  };
};


###############################################################################
### FILE: hooks/useResponsive.ts
###############################################################################
/**
 * A centralized hook for responsive design.
 * Provides a boolean indicating if the current viewport matches the desktop breakpoint.
 * Uses the performant `window.matchMedia` API.
 */
import { useState, useEffect } from 'react';

// Using 768px as the standard 'md' breakpoint from Tailwind.
const DESKTOP_BREAKPOINT = '(min-width: 768px)';

export const useResponsive = () => {
  const [isDesktop, setIsDesktop] = useState(
    () => window.matchMedia(DESKTOP_BREAKPOINT).matches
  );

  useEffect(() => {
    const mediaQueryList = window.matchMedia(DESKTOP_BREAKPOINT);
    const listener = (event: MediaQueryListEvent) => {
      setIsDesktop(event.matches);
    };

    mediaQueryList.addEventListener('change', listener);

    // Cleanup listener on component unmount
    return () => {
      mediaQueryList.removeEventListener('change', listener);
    };
  }, []);

  return { isDesktop };
};


###############################################################################
### FILE: hooks/useScrollOverflow.ts
###############################################################################
import { useState, useEffect, useRef, RefObject } from 'react';

export const useScrollOverflow = (ref: RefObject<HTMLElement | null>) => {
  const [isOverflowing, setIsOverflowing] = useState(false);
  const observerRef = useRef<ResizeObserver | null>(null);

  useEffect(() => {
    const element = ref.current;
    if (!element) return;

    // Disconnect previous observer if ref changes
    if (observerRef.current) {
      observerRef.current.disconnect();
    }

    const checkOverflow = () => {
      // The core logic: content width is greater than visible width
      const hasOverflow = element.scrollWidth > element.clientWidth;
      setIsOverflowing(hasOverflow);
    };

    // Create a new observer that calls our check function on resize
    const resizeObserver = new ResizeObserver(checkOverflow);
    resizeObserver.observe(element);
    observerRef.current = resizeObserver;

    // Initial check
    checkOverflow();

    // Cleanup on unmount
    return () => {
      resizeObserver.disconnect();
    };
  }, [ref]);

  return isOverflowing;
};


###############################################################################
### FILE: index.css
###############################################################################
@tailwind base;
@tailwind components;
@tailwind utilities;

/**
 * Global CSS Foundation for Concept Map Builder
 * 
 * This file establishes the complete design system including:
 * - CSS custom properties for light/dark mode theming
 * - Glassmorphism transparency levels (Level 1: opaque, Level 2: semi-transparent, Level 3: highly transparent)
 * - Typography system using system fonts
 * - Base component styles and utilities
 * - Animation and transition foundations
 */

/* ===== CSS CUSTOM PROPERTIES (DESIGN TOKENS) ===== */
:root {
  /* Light Mode Colors */
  --color-bg-primary: #f8fafc;     /* App canvas background */
  --color-bg-secondary: #ffffff;   /* Card backgrounds, panels */
  --color-bg-tertiary: #f1f5f9;    /* Alternative surfaces */

  /* Enhanced Golden Blue & Orange Theme */
  --color-accent-primary: #0ea5e9;        /* Ocean blue for primary */
  --color-accent-primary-hover: #0284c7;  /* Darker blue for hover */
  --color-accent-secondary: #f97316;      /* Vibrant orange */
  --color-accent-secondary-hover: #ea580c; /* Darker orange for hover */
  --color-accent-tertiary: #eab308;       /* Golden yellow tertiary */
  --color-accent-quaternary: #fbbf24;     /* Lighter golden accent */

  /* Text Colors */
  --color-text-base: #0f172a;      /* Deep slate - Main body text */
  --color-text-muted: #64748b;     /* Muted slate - Subdued text */
  --color-text-inverted: #f8fafc;  /* Light - Text on dark backgrounds */
  --color-text-accent: #f97316;    /* Orange accent text */

  /* Border & Divider */
  --color-border: #e2e8f0;         /* Light borders */

  /* Status Colors */
  --color-danger: #ef4444;         /* Red - Errors */
  --color-success: #22c55e;        /* Green - Success states */
  --color-warning: #f59e0b;        /* Amber - Warnings */

  /* Enhanced Glassmorphism with proper backdrop filters */
  --glass-level-1: rgba(255, 255, 255, 0.95);   /* Near opaque with subtle transparency */
  --glass-level-2: rgba(255, 255, 255, 0.85);   /* Semi-transparent with strong blur */
  --glass-level-3: rgba(255, 255, 255, 0.75);   /* More transparent with medium blur */
  --glass-backdrop-overlay: rgba(0, 0, 0, 0.4);  /* Modal backdrop */
  
  /* Gradient Definitions */
  --gradient-primary: linear-gradient(135deg, #0ea5e9 0%, #eab308 100%);
  --gradient-secondary: linear-gradient(135deg, #f97316 0%, #fbbf24 100%);
  --gradient-accent: linear-gradient(135deg, #0ea5e9 0%, #f97316 100%);
}

/* Dark Mode Colors - Enhanced for dramatic effect */
.dark {
  --color-bg-primary: #0f172a;     /* Very deep slate background */
  --color-bg-secondary: #1e293b;   /* Slightly lighter slate for cards */
  --color-bg-tertiary: #334155;    /* Medium slate for surfaces */

  --color-accent-primary: #0ea5e9;        /* Ocean blue primary */
  --color-accent-primary-hover: #0284c7;  /* Darker blue for hover */
  --color-accent-secondary: #f97316;      /* Vibrant orange accent */
  --color-accent-secondary-hover: #fb923c; /* Lighter orange for hover */
  --color-accent-tertiary: #eab308;       /* Golden yellow for dark mode */
  --color-accent-quaternary: #fbbf24;     /* Lighter golden accent */

  --color-text-base: #f8fafc;      /* Near white - Main body text */
  --color-text-muted: #94a3b8;     /* Light slate - Subdued text */
  --color-text-inverted: #0f172a;  /* Deep slate - Text on light backgrounds */

  --color-border: #334155;         /* Subtle borders in dark mode */

  --color-danger: #ef4444;         /* Bright red for dark mode */
  --color-success: #22c55e;        /* Bright green for dark mode */

  /* Enhanced Dark Glassmorphism */
  --glass-level-1: rgba(30, 41, 59, 0.95);   /* Near opaque dark glass */
  --glass-level-2: rgba(30, 41, 59, 0.85);   /* Semi-transparent dark glass */
  --glass-level-3: rgba(30, 41, 59, 0.75);   /* More transparent dark glass */
  --glass-backdrop-overlay: rgba(0, 0, 0, 0.6); /* Darker modal backdrop */
  
  /* Dark Mode Gradients */
  --gradient-primary: linear-gradient(135deg, #0ea5e9 0%, #eab308 100%);
  --gradient-secondary: linear-gradient(135deg, #f97316 0%, #fbbf24 100%);
  --gradient-accent: linear-gradient(135deg, #0ea5e9 0%, #f97316 100%);
}

/* ===== BASE STYLES ===== */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 16px; /* Base font size for rem calculations */
  line-height: 1.5;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif;
  background-color: var(--color-bg-primary);
  color: var(--color-text-base);
  overflow: hidden; /* Prevent body scroll, app handles its own scrolling */
  transition: background-color 0.3s ease, color 0.3s ease;
}

#root {
  width: 100vw;
  height: 100vh;
  overflow: hidden;
}

/* ===== ENHANCED GLASSMORPHISM UTILITY CLASSES ===== */
.glass-level-1 {
  background: var(--glass-level-1);
  backdrop-filter: blur(20px) saturate(180%);
  -webkit-backdrop-filter: blur(20px) saturate(180%);
  border: 1px solid rgba(255, 255, 255, 0.3);
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.glass-level-2 {
  background: var(--glass-level-2);
  backdrop-filter: blur(16px) saturate(160%);
  -webkit-backdrop-filter: blur(16px) saturate(160%);
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: 
    0 4px 16px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.15);
}

.glass-level-3 {
  background: var(--glass-level-3);
  backdrop-filter: blur(12px) saturate(140%);
  -webkit-backdrop-filter: blur(12px) saturate(140%);
  border: 1px solid rgba(255, 255, 255, 0.15);
  box-shadow: 
    0 2px 8px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

.glass-backdrop {
  background: var(--glass-backdrop-overlay);
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(8px);
}

/* Dark mode glassmorphism adjustments */
.dark .glass-level-1 {
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

.dark .glass-level-2 {
  border: 1px solid rgba(255, 255, 255, 0.08);
  box-shadow: 
    0 4px 16px rgba(0, 0, 0, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.08);
}

.dark .glass-level-3 {
  border: 1px solid rgba(255, 255, 255, 0.06);
  box-shadow: 
    0 2px 8px rgba(0, 0, 0, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.06);
}

/* ===== TYPOGRAPHY CLASSES ===== */
.text-display {
  font-size: 2.25rem;   /* 36px */
  font-weight: 700;
  line-height: 1.2;
}

.text-h2 {
  font-size: 1.875rem;  /* 30px */
  font-weight: 600;
  line-height: 1.2;
}

.text-h3 {
  font-size: 1.5rem;    /* 24px */
  font-weight: 600;
  line-height: 1.2;
}

.text-body-large {
  font-size: 1.125rem;  /* 18px */
  font-weight: 400;
  line-height: 1.5;
}

.text-body {
  font-size: 1rem;      /* 16px */
  font-weight: 400;
  line-height: 1.5;
}

.text-small {
  font-size: 0.875rem;  /* 14px */
  font-weight: 400;
  line-height: 1.5;
}

/* ===== BUTTON BASE STYLES ===== */
.btn-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  font-weight: 600;
  font-size: 0.875rem;
  line-height: 1;
  transition: all 0.15s ease-in-out;
  cursor: pointer;
  border: none;
  outline: none;
  min-height: 44px; /* Accessibility: minimum touch target */
}

.btn-primary {
  background: var(--gradient-primary);
  color: white;
  box-shadow: 
    0 4px 14px rgba(249, 115, 22, 0.3),
    0 2px 8px rgba(15, 23, 42, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
  border: 1px solid rgba(249, 115, 22, 0.4);
  position: relative;
  overflow: hidden;
}

.btn-primary::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.6s ease;
}

.btn-primary:hover::before {
  left: 100%;
}

.btn-primary:hover {
  background: var(--gradient-accent);
  transform: scale(1.02) translateY(-2px);
  box-shadow: 
    0 8px 25px rgba(249, 115, 22, 0.4),
    0 4px 12px rgba(15, 23, 42, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.3);
}

.btn-primary:active {
  transform: scale(0.98) translateY(0);
  box-shadow: 
    0 2px 8px rgba(249, 115, 22, 0.4),
    inset 0 2px 4px rgba(0, 0, 0, 0.2);
}

.btn-secondary {
  background: var(--color-bg-secondary);
  color: var(--color-text-base);
  border: 1px solid var(--color-border);
  box-shadow: 
    0 2px 8px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.3);
  position: relative;
  overflow: hidden;
}

.btn-secondary::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(14, 165, 233, 0.1), transparent);
  transition: left 0.5s ease;
}

.btn-secondary:hover::before {
  left: 100%;
}

.btn-secondary:hover {
  background: var(--color-bg-tertiary);
  transform: translateY(-1px);
  box-shadow: 
    0 4px 12px rgba(0, 0, 0, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.4),
    0 0 0 1px rgba(14, 165, 233, 0.3);
}

.btn-ghost {
  background: transparent;
  color: var(--color-text-base);
  border: 1px solid var(--color-border);
}

.btn-ghost:hover {
  background: rgba(241, 245, 249, 0.1);
}

.dark .btn-ghost:hover {
  background: rgba(31, 41, 55, 0.2);
}

/* ===== INPUT STYLES ===== */
.input-base {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  background: var(--color-bg-secondary);
  color: var(--color-text-base);
  font-size: 0.875rem;
  transition: all 0.2s ease-in-out;
  box-shadow: 
    0 2px 4px rgba(0, 0, 0, 0.05),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

.input-base:focus {
  outline: none;
  border-color: var(--color-accent-secondary);
  box-shadow: 
    0 0 0 3px rgba(249, 115, 22, 0.1),
    0 4px 8px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
  transform: translateY(-1px);
}

.input-base::placeholder {
  color: var(--color-text-muted);
  font-style: italic;
}

/* ===== TAB STYLES ===== */
.tab-container {
  display: flex;
  gap: 0.5rem;
  overflow-x: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
}

.tab-container::-webkit-scrollbar {
  display: none;
}

.tab-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  font-weight: 600;
  font-size: 0.875rem;
  color: var(--color-text-muted);
  background: transparent;
  border: none;
  cursor: pointer;
  transition: all 0.15s ease-in-out;
  white-space: nowrap;
  min-height: 44px;
  position: relative;
}

.tab-button:hover {
  color: var(--color-accent-primary);
  background: rgba(14, 165, 233, 0.08);
  transform: translateY(-1px);
  box-shadow: 
    0 4px 12px rgba(14, 165, 233, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

.tab-button.active {
  color: var(--color-accent-primary);
  font-weight: 700;
  background: rgba(14, 165, 233, 0.15);
  border: 1px solid rgba(14, 165, 233, 0.3);
  transform: translateY(-1px);
  box-shadow: 
    0 8px 25px rgba(14, 165, 233, 0.25),
    0 4px 12px rgba(234, 179, 8, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.tab-button.active::before {
  content: '';
  position: absolute;
  inset: 0;
  background: var(--gradient-primary);
  opacity: 0.1;
  border-radius: inherit;
  z-index: -1;
}

.tab-button.active::after {
  content: '';
  position: absolute;
  bottom: -1px;
  left: 0;
  right: 0;
  height: 3px;
  background: var(--gradient-primary);
  border-radius: 1.5px;
  box-shadow: 
    0 0 12px rgba(14, 165, 233, 0.8),
    0 0 6px rgba(234, 179, 8, 0.6);
}

/* ===== CARD STYLES ===== */
.card-base {
  background: var(--color-bg-secondary);
  border: 1px solid var(--color-border);
  border-radius: 0.75rem;
  padding: 1.5rem;
  box-shadow: 
    0 4px 16px rgba(0, 0, 0, 0.08),
    0 1px 4px rgba(0, 0, 0, 0.05),
    inset 0 1px 0 rgba(255, 255, 255, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.card-base::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(249, 115, 22, 0.3), transparent);
}

.card-base:hover {
  transform: translateY(-2px);
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.12),
    0 4px 16px rgba(0, 0, 0, 0.08),
    inset 0 1px 0 rgba(255, 255, 255, 0.4);
}

.dark .card-base {
  box-shadow: 
    0 4px 16px rgba(0, 0, 0, 0.2),
    0 1px 4px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

.dark .card-base:hover {
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.3),
    0 4px 16px rgba(0, 0, 0, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.15);
}

.card-elevated {
  background: var(--glass-level-3);
  backdrop-filter: blur(16px) saturate(140%);
  -webkit-backdrop-filter: blur(16px) saturate(140%);
  border-radius: 1rem;
  border: 1px solid rgba(255, 255, 255, 0.15);
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.15),
    0 4px 16px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.dark .card-elevated {
  backdrop-filter: blur(20px) saturate(150%);
  -webkit-backdrop-filter: blur(20px) saturate(150%);
  border: 1px solid rgba(255, 255, 255, 0.08);
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.4),
    0 4px 16px rgba(0, 0, 0, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

/* ===== ANIMATION UTILITIES ===== */
.animate-fade-in {
  animation: fadeIn 0.3s ease-in-out;
}

.animate-slide-in-right {
  animation: slideInRight 0.3s ease-in-out;
}

.animate-slide-in-bottom {
  animation: slideInBottom 0.3s ease-in-out;
}

.animate-pop {
  animation: pop 0.15s ease-in-out;
}

/* Removed continuous animations for better performance and less distraction */

.hover\:scale-102:hover {
  transform: scale(1.02);
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideInRight {
  from { 
    opacity: 0; 
    transform: translateX(100%); 
  }
  to { 
    opacity: 1; 
    transform: translateX(0); 
  }
}

@keyframes slideInBottom {
  from { 
    opacity: 0; 
    transform: translateY(100%); 
  }
  to { 
    opacity: 1; 
    transform: translateY(0); 
  }
}

@keyframes pop {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}

/* Removed keyframes for continuous animations */

/* ===== UTILITY CLASSES ===== */
.shadow-glow-primary {
  box-shadow: 0 0 8px rgba(245, 158, 11, 0.4);
}

.shadow-glow-secondary {
  box-shadow: 0 0 8px rgba(6, 182, 212, 0.4);
}

.transition-standard {
  transition: all 0.15s ease-in-out;
}

.transition-moderate {
  transition: all 0.3s ease-in-out;
}

.transition-slow {
  transition: all 0.5s ease-in-out;
}

/* ===== SCROLLBAR STYLING ===== */
.custom-scrollbar {
  scrollbar-width: thin;
  scrollbar-color: var(--color-border) transparent;
}

.custom-scrollbar::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background: var(--color-border);
  border-radius: 3px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: var(--color-text-muted);
}

.scrollbar-hide {
  scrollbar-width: none;
  -ms-overflow-style: none;
}

.scrollbar-hide::-webkit-scrollbar {
  display: none;
}

/* ===== ACCESSIBILITY HELPERS ===== */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* ===== RESPONSIVE BREAKPOINT HELPERS ===== */
@media (max-width: 767px) {
  .mobile-hidden {
    display: none !important;
  }
}

@media (min-width: 768px) {
  .desktop-hidden {
    display: none !important;
  }
}


/* ===== NEW: AMBIENT ANIMATIONS FOR WELCOME SCREEN ===== */

@keyframes pulse-glow {
  0%, 100% {
    opacity: 0.2;
    transform: scale(1);
  }
  50% {
    opacity: 0.35;
    transform: scale(1.1);
  }
}

@keyframes gentle-drift-one {
  0% { transform: translate(0, 0); }
  25% { transform: translate(8vw, 12vh) scale(1.1); }
  50% { transform: translate(-8vw, 18vh) scale(0.9); }
  75% { transform: translate(12vw, -8vh) scale(1.1); }
  100% { transform: translate(0, 0); }
}

@keyframes gentle-drift-two {
  0% { transform: translate(0, 0) scale(1.1); }
  25% { transform: translate(-8vw, -12vh) scale(0.9); }
  50% { transform: translate(8vw, -18vh) scale(1.1); }
  75% { transform: translate(-12vw, 8vh) scale(0.9); }
  100% { transform: translate(0, 0) scale(1.1); }
}


###############################################################################
### FILE: main.tsx
###############################################################################
/**
 * Main Entry Point for Concept Map Builder
 * 
 * This file initializes the React application and renders the root App component.
 * It imports global styles and sets up the foundation for the entire application.
 */

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)



###############################################################################
### FILE: stores/appState.ts
###############################################################################
/**
 * Main Application State Store (Zustand)
 * 
 * This store manages the complete application state including:
 * - Graph elements (nodes and edges)
 * - Layout metadata for different layout modes
 * - Current interaction mode and layout
 * - Snapshots/checkpoints system
 * - App settings and preferences
 * - Edge color inheritance rules and connector node logic
 */

import { create } from 'zustand'
import { devtools, persist } from 'zustand/middleware'

// ===== TYPE DEFINITIONS =====

export type InteractionMode = 
  | 'view' 
  | 'manualEdit' 
  | 'paint' 
  | 'layout' 
  | 'dataIO' 
  | 'analyze'

export type LayoutMode = 
  | 'preset' 
  | 'physics' 
  | 'concentric' 
  | 'dagre' 
  | 'grid'

export interface NodeData {
  id: string
  label: string
  color?: string
  shape?: 'ellipse' | 'rectangle' | 'diamond' | 'triangle'
  tags?: string[]
  locked?: boolean
  isConnectorNode?: boolean // Special flag for connector nodes that don't inherit edge colors
  position?: { x: number; y: number }
}

export interface EdgeData {
  id: string
  source: string
  target: string
  label?: string
  color?: string
  length?: number
  weight?: number
}

export interface LayoutMeta {
  nodePositions?: Record<string, { x: number; y: number }>
  lockedNodes?: string[]
  edgeLengths?: Record<string, number>
  modeParams?: Record<string, any> // Layout-specific parameters
}

export interface Snapshot {
  id: string
  name: string
  timestamp: number
  elements: {
    nodes: NodeData[]
    edges: EdgeData[]
  }
  layouts: Record<LayoutMode, LayoutMeta>
  description?: string
}

export interface AppSettings {
  theme: 'light' | 'dark'
  inputMode: 'auto' | 'mobile' | 'desktop'
  useConnectorNodes: boolean // Whether to use connector nodes instead of edge labels
  canvasLocked: boolean // Whether canvas pan/zoom is locked
  autoSave: boolean
  gridSnapping: boolean
}

export interface AppState {
  // Graph Data
  elements: {
    nodes: NodeData[]
    edges: EdgeData[]
  }
  
  // Layout Management
  layouts: Record<LayoutMode, LayoutMeta>
  currentLayout: LayoutMode
  
  // Interaction State
  mode: InteractionMode
  selectedNodes: string[]
  selectedEdges: string[]
  
  // Paint Mode State
  selectedColor: string
  propagateToEdges: boolean
  
  // Snapshots
  snapshots: Snapshot[]
  
  // App Settings
  settings: AppSettings
  
  // UI State
  sidebarCollapsed: boolean
  utilityPanelVisible: boolean
  utilityPanelWidth: number // Desktop
  utilityPanelHeight: number // Mobile
  
  // Data I/O State
  importMode: 'merge' | 'replace'
  validationErrors: string[]
  
  // ===== ACTIONS =====
  
  // Mode Management
  setMode: (mode: InteractionMode) => void
  setLayout: (layout: LayoutMode) => void
  
  // Graph Element Management
  addNode: (node: Omit<NodeData, 'id'> & { id?: string }) => void
  updateNode: (id: string, updates: Partial<NodeData>) => void
  deleteNode: (id: string) => void
  addEdge: (edge: Omit<EdgeData, 'id'> & { id?: string }) => void
  updateEdge: (id: string, updates: Partial<EdgeData>) => void
  deleteEdge: (id: string) => void
  
  // Selection Management
  selectNode: (id: string, addToSelection?: boolean) => void
  selectEdge: (id: string, addToSelection?: boolean) => void
  clearSelection: () => void
  
  // Layout Management
  saveLayoutMeta: (layout: LayoutMode, meta: LayoutMeta) => void
  applyLayout: (layout: LayoutMode) => void
  lockNode: (id: string) => void
  unlockNode: (id: string) => void
  
  // Paint Mode Actions
  setSelectedColor: (color: string) => void
  setPropagateToEdges: (propagate: boolean) => void
  paintNode: (id: string, color: string) => void
  paintEdge: (id: string, color: string) => void
  
  // Snapshot Management
  saveSnapshot: (name: string, description?: string) => void
  restoreSnapshot: (id: string) => void
  deleteSnapshot: (id: string) => void
  renameSnapshot: (id: string, name: string) => void
  
  // Data I/O Actions
  setImportMode: (mode: 'merge' | 'replace') => void
  validateAndImportData: (data: any) => Promise<boolean>
  exportData: (format: 'json' | 'csv') => any
  
  // Settings Management
  updateSettings: (updates: Partial<AppSettings>) => void
  toggleTheme: () => void
  
  // UI State Management
  toggleSidebar: () => void
  setUtilityPanelVisible: (visible: boolean) => void
  setUtilityPanelWidth: (width: number) => void
  setUtilityPanelHeight: (height: number) => void
  
  // Utility Functions
  reset: () => void
  getNodeById: (id: string) => NodeData | undefined
  getEdgeById: (id: string) => EdgeData | undefined
}

// ===== DEFAULT STATE =====

const defaultState = {
  elements: {
    nodes: [],
    edges: [],
  },
  layouts: {
    preset: {},
    physics: {},
    concentric: {},
    dagre: {},
    grid: {},
  } as Record<LayoutMode, LayoutMeta>,
  currentLayout: 'preset' as LayoutMode,
  mode: 'view' as InteractionMode,
  selectedNodes: [],
  selectedEdges: [],
  selectedColor: '#f59e0b', // Default orange
  propagateToEdges: true,
  snapshots: [],
  settings: {
    theme: 'dark' as const,
    inputMode: 'auto' as const,
    useConnectorNodes: false,
    canvasLocked: false,
    autoSave: true,
    gridSnapping: false,
  },
  sidebarCollapsed: false,
  utilityPanelVisible: false,
  utilityPanelWidth: 300,
  utilityPanelHeight: 300,
  importMode: 'replace' as const,
  validationErrors: [],
}

// ===== STORE IMPLEMENTATION =====

export const useAppStore = create<AppState>()(
  devtools(
    persist(
      (set, get) => ({
        ...defaultState,
        
        // Mode Management
        setMode: (mode) => set({ mode }),
        setLayout: (layout) => set({ currentLayout: layout }),
        
        // Graph Element Management
        addNode: (nodeData) => {
          const id = nodeData.id || `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
          const node: NodeData = {
            id,
            label: nodeData.label || id,
            color: nodeData.color || '#cccccc',
            shape: nodeData.shape || 'ellipse',
            tags: nodeData.tags || [],
            locked: false,
            isConnectorNode: nodeData.isConnectorNode || false,
            position: nodeData.position,
          }
          
          set((state) => ({
            elements: {
              ...state.elements,
              nodes: [...state.elements.nodes, node],
            },
          }))
        },
        
        updateNode: (id, updates) => {
          set((state) => ({
            elements: {
              ...state.elements,
              nodes: state.elements.nodes.map((node) =>
                node.id === id ? { ...node, ...updates } : node
              ),
            },
          }))
        },
        
        deleteNode: (id) => {
          set((state) => ({
            elements: {
              nodes: state.elements.nodes.filter((node) => node.id !== id),
              edges: state.elements.edges.filter((edge) => edge.source !== id && edge.target !== id),
            },
            selectedNodes: state.selectedNodes.filter((nodeId) => nodeId !== id),
          }))
        },
        
        addEdge: (edgeData) => {
          const state = get()
          const id = edgeData.id || `edge_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
          
          // Find source node for color inheritance
          const sourceNode = state.elements.nodes.find(n => n.id === edgeData.source)
          let edgeColor = edgeData.color
          
          // Apply color inheritance rule: edges inherit source color unless source is a connector node
          if (!edgeColor && sourceNode && !sourceNode.isConnectorNode) {
            edgeColor = sourceNode.color
          }
          
          const edge: EdgeData = {
            id,
            source: edgeData.source,
            target: edgeData.target,
            label: edgeData.label || '',
            color: edgeColor || '#888888',
            length: edgeData.length || 100,
            weight: edgeData.weight || 1,
          }
          
          set((state) => ({
            elements: {
              ...state.elements,
              edges: [...state.elements.edges, edge],
            },
          }))
        },
        
        updateEdge: (id, updates) => {
          set((state) => ({
            elements: {
              ...state.elements,
              edges: state.elements.edges.map((edge) =>
                edge.id === id ? { ...edge, ...updates } : edge
              ),
            },
          }))
        },
        
        deleteEdge: (id) => {
          set((state) => ({
            elements: {
              ...state.elements,
              edges: state.elements.edges.filter((edge) => edge.id !== id),
            },
            selectedEdges: state.selectedEdges.filter((edgeId) => edgeId !== id),
          }))
        },
        
        // Selection Management
        selectNode: (id, addToSelection = false) => {
          set((state) => ({
            selectedNodes: addToSelection 
              ? [...state.selectedNodes, id]
              : [id],
            selectedEdges: addToSelection ? state.selectedEdges : [],
          }))
        },
        
        selectEdge: (id, addToSelection = false) => {
          set((state) => ({
            selectedEdges: addToSelection 
              ? [...state.selectedEdges, id]
              : [id],
            selectedNodes: addToSelection ? state.selectedNodes : [],
          }))
        },
        
        clearSelection: () => {
          set({ selectedNodes: [], selectedEdges: [] })
        },
        
        // Layout Management
        saveLayoutMeta: (layout, meta) => {
          set((state) => ({
            layouts: {
              ...state.layouts,
              [layout]: meta,
            },
          }))
        },
        
        applyLayout: (layout) => {
          set({ currentLayout: layout })
        },
        
        lockNode: (id) => {
          get().updateNode(id, { locked: true })
        },
        
        unlockNode: (id) => {
          get().updateNode(id, { locked: false })
        },
        
        // Paint Mode Actions
        setSelectedColor: (color) => set({ selectedColor: color }),
        setPropagateToEdges: (propagate) => set({ propagateToEdges: propagate }),
        
        paintNode: (id, color) => {
          const state = get()
          get().updateNode(id, { color })
          
          // If propagateToEdges is enabled and node is not a connector, paint its outgoing edges
          if (state.propagateToEdges) {
            const node = state.elements.nodes.find(n => n.id === id)
            if (node && !node.isConnectorNode) {
              const outgoingEdges = state.elements.edges.filter(edge => edge.source === id)
              outgoingEdges.forEach(edge => {
                get().updateEdge(edge.id, { color })
              })
            }
          }
        },
        
        paintEdge: (id, color) => {
          get().updateEdge(id, { color })
        },
        
        // Snapshot Management
        saveSnapshot: (name, description) => {
          const state = get()
          const snapshot: Snapshot = {
            id: `snapshot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            name,
            timestamp: Date.now(),
            elements: structuredClone(state.elements),
            layouts: structuredClone(state.layouts),
            description,
          }
          
          set((state) => ({
            snapshots: [...state.snapshots, snapshot],
          }))
        },
        
        restoreSnapshot: (id) => {
          const state = get()
          const snapshot = state.snapshots.find(s => s.id === id)
          if (snapshot) {
            set({
              elements: structuredClone(snapshot.elements),
              layouts: structuredClone(snapshot.layouts),
              currentLayout: 'preset',
            })
          }
        },
        
        deleteSnapshot: (id) => {
          set((state) => ({
            snapshots: state.snapshots.filter(s => s.id !== id),
          }))
        },
        
        renameSnapshot: (id, name) => {
          set((state) => ({
            snapshots: state.snapshots.map(s => 
              s.id === id ? { ...s, name } : s
            ),
          }))
        },
        
        // Data I/O Actions
        setImportMode: (mode) => set({ importMode: mode }),
        
        validateAndImportData: async (data) => {
          // TODO: Implement comprehensive validation logic
          try {
            if (data.nodes && Array.isArray(data.nodes)) {
              const state = get()
              if (state.importMode === 'replace') {
                set({ elements: { nodes: data.nodes, edges: data.edges || [] } })
              } else {
                // Merge logic - TODO: implement conflict resolution
                set((state) => ({
                  elements: {
                    nodes: [...state.elements.nodes, ...data.nodes],
                    edges: [...state.elements.edges, ...(data.edges || [])],
                  },
                }))
              }
              return true
            }
            return false
          } catch (error) {
            console.error('Import error:', error)
            return false
          }
        },
        
        exportData: (format) => {
          const state = get()
          if (format === 'json') {
            return {
              elements: state.elements,
              layouts: state.layouts,
              snapshots: state.snapshots,
              settings: state.settings,
            }
          }
          // TODO: Implement CSV export
          return null
        },
        
        // Settings Management
        updateSettings: (updates) => {
          set((state) => ({
            settings: { ...state.settings, ...updates },
          }))
        },
        
        // FIXED: The toggleTheme action should ONLY manage state.
        // The responsibility for applying the class to the <html> element belongs in a
        // React component's `useEffect` hook, not in the state store.
        toggleTheme: () => {
            set((state) => ({
              settings: {
                ...state.settings,
                theme: state.settings.theme === 'light' ? 'dark' : 'light',
              },
            }));
        },
        
        // UI State Management
        toggleSidebar: () => {
          set((state) => ({ sidebarCollapsed: !state.sidebarCollapsed }))
        },
        
        setUtilityPanelVisible: (visible) => set({ utilityPanelVisible: visible }),
        setUtilityPanelWidth: (width) => set({ utilityPanelWidth: width }),
        setUtilityPanelHeight: (height) => set({ utilityPanelHeight: height }),
        
        // Utility Functions
        reset: () => set(defaultState),
        
        getNodeById: (id) => {
          const state = get()
          return state.elements.nodes.find(node => node.id === id)
        },
        
        getEdgeById: (id) => {
          const state = get()
          return state.elements.edges.find(edge => edge.id === id)
        },
      }),
      {
        name: 'concept-map-app-state',
        partialize: (state) => ({
          elements: state.elements,
          layouts: state.layouts,
          snapshots: state.snapshots,
          settings: state.settings,
        }),
      }
    ),
    {
      name: 'concept-map-builder',
    }
  )
) 


###############################################################################
### FILE: vite-env.d.ts
###############################################################################
/// <reference types="vite/client" />



